[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

# for vim
# http://qiita.com/tekkoc/items/98adcadfa4bdc8b5a6ca
[[plugins]]
repo = 'kana/vim-submode'

# rubocop
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_ft = 'rb'

# 静的解析
[[plugins]]
repo = 'scrooloose/syntastic'

# ドキュメント参照
[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'yuku-t/vim-ref-ri'

# 自動で閉じる
[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'Shougo/neomru.vim'

# rails
[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'rb'

[[plugins]]
repo = 'basyura/unite-rails'

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'

# ruby
[[plugins]]
repo = 'osyo-manga/vim-monster'
on_ft = 'rb'

[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'astashov/vim-ruby-debugger'

#[[plugins]]
#repo = 'fishbullet/deoplete-ruby'

# memo tool
[[plugins]]
repo = 'fuenor/qfixhowm'

# denite
[[plugins]]
repo = 'Shougo/denite.nvim'

# view setting
[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['tagbar', 'vim-fugitive']
hook_add = '''
source ~/.config/nvim/plugins/airline.rc.vim
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = 'vim-airline'
hook_add = '''
let g:airline_theme='luna'
'''

[[plugins]]
repo = 'kassio/neoterm'
if = "has('nvim')"
hook_add = '''
'''
# ==========================================================
# Golang
# ==========================================================
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'

# ==========================================================
# terminal
# ==========================================================
[[plugins]]
repo = 'kassio/neoterm'
if = "has('nvim')"
hook_add = '''
nnoremap <silent> ,rc :TREPLSendFile<cr>
nnoremap <silent> ,rl :TREPLSendLine<cr>
vnoremap <silent> ,rl :TREPLSendSelection<cr>
nnoremap <silent> vt :Ttoggle<cr>
nnoremap <silent> vs :terminal<cr>
'''



[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
if = "has('nvim')"
on_i = 1
hook_source = '''
source ~/.config/nvim/plugins/deoplete.rc.vim
'''

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
"inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"
"" エンターキーで補完候補の確定. スニペットの展開もエンターキーで確定・・・・・・②
"imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand)" : pumvisible() ? "<C-y>" : "<CR>"
"" タブキーで補完候補の選択. スニペット内のジャンプもタブキーでジャンプ・・・・・・③
"imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
let g:neosnippet#enable_snipmate_compatibility = 1
'''
on_i  = 1
depends = ['neosnippet-snippets']

# Go settings
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'SirVer/ultisnips'
on_ft = 'go'

[[plugins]]
repo = 'zchee/vim-goiferr'
if = "has('nvim')"
on_ft = 'go'
hook_add = '''
'''

